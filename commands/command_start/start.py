import asyncio
import time
from datetime import datetime
from .states import Wait, TimeUser

from aiogram import Router, F, types
from aiogram.types import Message 
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext

router = Router(name=__name__)

place = [0,0,0,0]

usr = 0
num_place = 0


@router.message(TimeUser.timeForWait, Command('start'))
async def start_checking_place(message: Message, state: FSMContext):
    kb = [[
        types.KeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –º–µ—Å—Ç–∞"),
    ]]

    builder = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ")

    for x in range(len(place)):
        msg = ""
        if place[x] != 0:
            msg += f"üî¥ {x+1} –º–µ—Å—Ç–æ\n"
        else:
            msg += f"üü¢ {x+1} –º–µ—Å—Ç–æ\n"

        await message.answer(msg)
    
    await message.answer(f"–í–∞—à–µ –∑–∞–Ω—è—Ç–æ–µ –º–µ—Å—Ç–æ –Ω–æ–º–µ—Ä {num_place}", reply_markup=builder)

@router.message(TimeUser.timeForWait, F.text == "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –º–µ—Å—Ç–∞")
async def start_canceled_place(message: Message, state: FSMContext):
    await state.clear()

    place[num_place-1] = 0
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—Ä–µ–º—è –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ", reply_markup=types.ReplyKeyboardRemove())


@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.set_state(Wait.number)

    kb = [[
        types.KeyboardButton(text="1"),
        types.KeyboardButton(text="2"),
        types.KeyboardButton(text="3"),
        types.KeyboardButton(text="4"),
    ]]

    builder = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ")

    global usr
    usr = message.from_user.username

    for x in range(len(place)):
        msg = ""
        if place[x] != 0:
            msg += f"üî¥ {x+1} –º–µ—Å—Ç–æ\n"
        else:
            msg += f"üü¢ {x+1} –º–µ—Å—Ç–æ\n"

        await message.answer(msg, reply_markup=builder)

    

@router.message(Wait.number, (F.text == '1') | (F.text == '2') | (F.text == '3') | (F.text == '4'))  
async def search_place(message: Message, state: FSMContext):

    await state.clear()

    print(message.text)
    global num_place

    if message.text == "1":
        num_place = 1
    elif message.text == "2":
        num_place = 2
    elif message.text == "3":
        num_place = 3
    elif message.text == "4":
        num_place = 4
    
    if place[num_place-1] != 0:
        await message.answer("–ú–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–æ. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â—ë.", reply_markup=types.ReplyKeyboardRemove())

    else:

        kb = [[
            types.KeyboardButton(text="30 –º–∏–Ω—É—Ç"),
            types.KeyboardButton(text="1 —á–∞—Å"),
            types.KeyboardButton(text="2 —á–∞—Å–∞"),
        ]]
        builder = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤–æ-—Å–∫–æ–ª—å–∫–æ –≤–∞—Å —É–ø–æ–º—è–Ω—É—Ç—å?")

        place[num_place-1] = usr

        await state.set_state(TimeUser.timeForWait)
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤–æ-—Å–∫–æ–ª—å–∫–æ –≤–∞—Å —É–ø–æ–º—è–Ω—É—Ç—å?", reply_markup=builder) 


@router.message(Wait.number)
async def search_place_invalid(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏-–∫–∞ –µ—â—ë —Ä–∞–∑ —á–∏—Å–ª–æ...")


@router.message(TimeUser.timeForWait, (F.text == "30 –º–∏–Ω—É—Ç") | (F.text == "1 —á–∞—Å") | (F.text == "2 —á–∞—Å–∞"))
async def inf_timer_with_break(message: Message, state: FSMContext):

    await message.answer("–û–∫–µ–π", reply_markup=types.ReplyKeyboardRemove())

    if message.text == "30 –º–∏–Ω—É—Ç":
        time_ = 30
            
    elif message.text == "1 —á–∞—Å":
        time_ = 60
        
    elif message.text == "2 —á–∞—Å–∞":
        time_ = 120

    await asyncio.sleep(time_)

    if place[num_place-1] != 0:

        kb = [[
            types.KeyboardButton(text="–î–∞"),
            types.KeyboardButton(text="–ù–µ—Ç"),
        ]]

        builder = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder="–ü—Ä–æ–¥–ª–∏–≤–∞—Ç—å –ª–∏ –≤—Ä–µ–º—è?")
        await message.answer("–ü—Ä–æ–¥–ª–∏–≤–∞—Ç—å –ª–∏ –≤—Ä–µ–º—è?", reply_markup=builder)

        start_time = time.time()

        if time.time() - start_time > 10.0:
            state.clear()
            await message.answer("–í–∞—à–µ –º–µ—Å—Ç–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ")
        



@router.message(TimeUser.timeForWait, F.text.startswith("–î–∞"))
async def yes(message: Message):

    if message.text == "–î–∞":
        kb = [[
            types.KeyboardButton(text="30 –º–∏–Ω—É—Ç"),
            types.KeyboardButton(text="1 —á–∞—Å"),
            types.KeyboardButton(text="2 —á–∞—Å–∞"),
        ]]
        builder = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤–æ-—Å–∫–æ–ª—å–∫–æ –≤–∞—Å —É–ø–æ–º—è–Ω—É—Ç—å?")
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤–æ-—Å–∫–æ–ª—å–∫–æ –≤–∞—Å —É–ø–æ–º—è–Ω—É—Ç—å?", reply_markup=builder) 


@router.message(TimeUser.timeForWait, F.text.startswith("–ù–µ—Ç"))
async def no(message: Message, state: FSMContext):
    
    global num_place
    
    place[num_place-1] = 0
    await state.clear()

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—Ä–µ–º—è –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ", reply_markup= types.ReplyKeyboardRemove())


